// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.formrecognizer.implementation;

import com.azure.ai.formrecognizer.implementation.models.AnalyzeDocumentResponse;
import com.azure.ai.formrecognizer.implementation.models.AnalyzeResultFormat;
import com.azure.ai.formrecognizer.implementation.models.AnalyzeResultOperation;
import com.azure.ai.formrecognizer.implementation.models.BeginCopyModelResponse;
import com.azure.ai.formrecognizer.implementation.models.ComposeModelResponse;
import com.azure.ai.formrecognizer.implementation.models.ContentType;
import com.azure.ai.formrecognizer.implementation.models.CopyAuthorization;
import com.azure.ai.formrecognizer.implementation.models.ErrorException;
import com.azure.ai.formrecognizer.implementation.models.ModelInfo;
import com.azure.ai.formrecognizer.implementation.models.OperationInfo;
import com.azure.ai.formrecognizer.implementation.models.Paths17S33EsDocumentmodelsModelidGetResponses200ContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.implementation.models.Paths1A41EsjOperationsOperationidGetResponses200ContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.implementation.models.Paths1CndbjaDocumentmodelsGetResponses200ContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.implementation.models.Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.implementation.models.Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.implementation.models.Paths1JppyhfDocumentmodelsTrainPostRequestbodyContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.implementation.models.Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.implementation.models.PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.implementation.models.PathsY4MxprOperationsGetResponses200ContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.implementation.models.StringIndexType;
import com.azure.ai.formrecognizer.implementation.models.TrainModelResponse;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import java.nio.ByteBuffer;
import java.util.List;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the FormRecognizerClient type. */
public final class FormRecognizerClientImpl {
    /** The proxy service used to perform REST calls. */
    private final FormRecognizerClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** List of 1-based page numbers to analyze. Ex. "1-3,5,7-9". */
    private final List<String> pages;

    /**
     * Gets List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     *
     * @return the pages value.
     */
    public List<String> getPages() {
        return this.pages;
    }

    /**
     * Locale hint for text recognition and document analysis. Value may contain only the language code (ex. "en", "fr")
     * or BCP 47 language tag (ex. "en-US").
     */
    private final String locale;

    /**
     * Gets Locale hint for text recognition and document analysis. Value may contain only the language code (ex. "en",
     * "fr") or BCP 47 language tag (ex. "en-US").
     *
     * @return the locale value.
     */
    public String getLocale() {
        return this.locale;
    }

    /** Method used to compute string offset and length. */
    private final StringIndexType stringIndexType;

    /**
     * Gets Method used to compute string offset and length.
     *
     * @return the stringIndexType value.
     */
    public StringIndexType getStringIndexType() {
        return this.stringIndexType;
    }

    /** Client-generated unique request ID. */
    private final String repeatabilityRequestID;

    /**
     * Gets Client-generated unique request ID.
     *
     * @return the repeatabilityRequestID value.
     */
    public String getRepeatabilityRequestID() {
        return this.repeatabilityRequestID;
    }

    /** Date and time the request was first created. */
    private final String repeatabilityFirstSent;

    /**
     * Gets Date and time the request was first created.
     *
     * @return the repeatabilityFirstSent value.
     */
    public String getRepeatabilityFirstSent() {
        return this.repeatabilityFirstSent;
    }

    /** Api Version. */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of FormRecognizerClient client.
     *
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param repeatabilityRequestID Client-generated unique request ID.
     * @param repeatabilityFirstSent Date and time the request was first created.
     * @param apiVersion Api Version.
     */
    FormRecognizerClientImpl(
            String endpoint,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            String repeatabilityRequestID,
            String repeatabilityFirstSent,
            String apiVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint,
                pages,
                locale,
                stringIndexType,
                repeatabilityRequestID,
                repeatabilityFirstSent,
                apiVersion);
    }

    /**
     * Initializes an instance of FormRecognizerClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param repeatabilityRequestID Client-generated unique request ID.
     * @param repeatabilityFirstSent Date and time the request was first created.
     * @param apiVersion Api Version.
     */
    FormRecognizerClientImpl(
            HttpPipeline httpPipeline,
            String endpoint,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            String repeatabilityRequestID,
            String repeatabilityFirstSent,
            String apiVersion) {
        this(
                httpPipeline,
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint,
                pages,
                locale,
                stringIndexType,
                repeatabilityRequestID,
                repeatabilityFirstSent,
                apiVersion);
    }

    /**
     * Initializes an instance of FormRecognizerClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param repeatabilityRequestID Client-generated unique request ID.
     * @param repeatabilityFirstSent Date and time the request was first created.
     * @param apiVersion Api Version.
     */
    FormRecognizerClientImpl(
            HttpPipeline httpPipeline,
            SerializerAdapter serializerAdapter,
            String endpoint,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            String repeatabilityRequestID,
            String repeatabilityFirstSent,
            String apiVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.pages = pages;
        this.locale = locale;
        this.stringIndexType = stringIndexType;
        this.repeatabilityRequestID = repeatabilityRequestID;
        this.repeatabilityFirstSent = repeatabilityFirstSent;
        this.apiVersion = apiVersion;
        this.service =
                RestProxy.create(FormRecognizerClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for FormRecognizerClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}/formrecognizer")
    @ServiceInterface(name = "FormRecognizerClient")
    public interface FormRecognizerClientService {
        @Post("/documentModels/{modelId}/:analyze")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<AnalyzeDocumentResponse> analyzeDocument(
                @HostParam("endpoint") String endpoint,
                @PathParam("modelId") String modelId,
                @QueryParam("pages") String pages,
                @QueryParam("locale") String locale,
                @QueryParam("StringIndexType") StringIndexType stringIndexType,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Repeatability-Request-ID") String repeatabilityRequestID,
                @HeaderParam("RepeatabilityFirst-Sent") String repeatabilityFirstSent,
                @HeaderParam("Content-Type") ContentType contentType,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> analyzeRequest,
                @HeaderParam("Content-Length") Long contentLength,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/documentModels/{modelId}/:analyze")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<AnalyzeDocumentResponse> analyzeDocument(
                @HostParam("endpoint") String endpoint,
                @PathParam("modelId") String modelId,
                @QueryParam("pages") String pages,
                @QueryParam("locale") String locale,
                @QueryParam("StringIndexType") StringIndexType stringIndexType,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Repeatability-Request-ID") String repeatabilityRequestID,
                @HeaderParam("RepeatabilityFirst-Sent") String repeatabilityFirstSent,
                @BodyParam("application/json")
                        Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema
                                analyzeRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/documentModels/{modelId}/analyzeResults/{resultId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<AnalyzeResultOperation>> getAnalysisResults(
                @HostParam("endpoint") String endpoint,
                @PathParam("modelId") String modelId,
                @PathParam("resultId") String resultId,
                @QueryParam("format") AnalyzeResultFormat format,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/documentModels/:train")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<TrainModelResponse> trainModel(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        Paths1JppyhfDocumentmodelsTrainPostRequestbodyContentApplicationJsonSchema trainRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/documentModels/:compose")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ComposeModelResponse> composeModel(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/documentModels/:authorizeCopy")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<CopyAuthorization>> createCopyAuthorization(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema
                                authorizeCopyRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/documentModels/{modelId}/:copyTo")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BeginCopyModelResponse> beginCopyModel(
                @HostParam("endpoint") String endpoint,
                @PathParam("modelId") String modelId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") CopyAuthorization copyToRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/operations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<PathsY4MxprOperationsGetResponses200ContentApplicationJsonSchema>> listOperations(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Paths1A41EsjOperationsOperationidGetResponses200ContentApplicationJsonSchema>> getOperation(
                @HostParam("endpoint") String endpoint,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> cancelOperation(
                @HostParam("endpoint") String endpoint,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/documentModels")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Paths1CndbjaDocumentmodelsGetResponses200ContentApplicationJsonSchema>> listModels(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/documentModels/{modelId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Paths17S33EsDocumentmodelsModelidGetResponses200ContentApplicationJsonSchema>> getModelInfo(
                @HostParam("endpoint") String endpoint,
                @PathParam("modelId") String modelId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/documentModels/{modelId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> deleteModel(
                @HostParam("endpoint") String endpoint,
                @PathParam("modelId") String modelId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/info")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema>> getResourceInfo(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<PathsY4MxprOperationsGetResponses200ContentApplicationJsonSchema>> listOperationsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Paths1CndbjaDocumentmodelsGetResponses200ContentApplicationJsonSchema>> listModelsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param contentType Upload file type.
     * @param analyzeRequest Analyze request parameters.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeDocumentResponse> analyzeDocumentWithResponseAsync(
            String modelId, ContentType contentType, Flux<ByteBuffer> analyzeRequest, Long contentLength) {
        final String accept = "application/json";
        String thisGetPagesConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(this.getPages(), CollectionFormat.CSV);
        return FluxUtil.withContext(
                context ->
                        service.analyzeDocument(
                                this.getEndpoint(),
                                modelId,
                                thisGetPagesConverted,
                                this.getLocale(),
                                this.getStringIndexType(),
                                this.getApiVersion(),
                                this.getRepeatabilityRequestID(),
                                this.getRepeatabilityFirstSent(),
                                contentType,
                                analyzeRequest,
                                contentLength,
                                accept,
                                context));
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param contentType Upload file type.
     * @param analyzeRequest Analyze request parameters.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeDocumentResponse> analyzeDocumentWithResponseAsync(
            String modelId,
            ContentType contentType,
            Flux<ByteBuffer> analyzeRequest,
            Long contentLength,
            Context context) {
        final String accept = "application/json";
        String thisGetPagesConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(this.getPages(), CollectionFormat.CSV);
        return service.analyzeDocument(
                this.getEndpoint(),
                modelId,
                thisGetPagesConverted,
                this.getLocale(),
                this.getStringIndexType(),
                this.getApiVersion(),
                this.getRepeatabilityRequestID(),
                this.getRepeatabilityFirstSent(),
                contentType,
                analyzeRequest,
                contentLength,
                accept,
                context);
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param contentType Upload file type.
     * @param analyzeRequest Analyze request parameters.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> analyzeDocumentAsync(
            String modelId, ContentType contentType, Flux<ByteBuffer> analyzeRequest, Long contentLength) {
        return analyzeDocumentWithResponseAsync(modelId, contentType, analyzeRequest, contentLength)
                .flatMap((AnalyzeDocumentResponse res) -> Mono.empty());
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param contentType Upload file type.
     * @param analyzeRequest Analyze request parameters.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> analyzeDocumentAsync(
            String modelId,
            ContentType contentType,
            Flux<ByteBuffer> analyzeRequest,
            Long contentLength,
            Context context) {
        return analyzeDocumentWithResponseAsync(modelId, contentType, analyzeRequest, contentLength, context)
                .flatMap((AnalyzeDocumentResponse res) -> Mono.empty());
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param contentType Upload file type.
     * @param analyzeRequest Analyze request parameters.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void analyzeDocument(
            String modelId, ContentType contentType, Flux<ByteBuffer> analyzeRequest, Long contentLength) {
        analyzeDocumentAsync(modelId, contentType, analyzeRequest, contentLength).block();
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param contentType Upload file type.
     * @param analyzeRequest Analyze request parameters.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalyzeDocumentResponse analyzeDocumentWithResponse(
            String modelId,
            ContentType contentType,
            Flux<ByteBuffer> analyzeRequest,
            Long contentLength,
            Context context) {
        return analyzeDocumentWithResponseAsync(modelId, contentType, analyzeRequest, contentLength, context).block();
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param analyzeRequest Analyze request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeDocumentResponse> analyzeDocumentWithResponseAsync(
            String modelId,
            Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema analyzeRequest) {
        final String accept = "application/json";
        String thisGetPagesConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(this.getPages(), CollectionFormat.CSV);
        return FluxUtil.withContext(
                context ->
                        service.analyzeDocument(
                                this.getEndpoint(),
                                modelId,
                                thisGetPagesConverted,
                                this.getLocale(),
                                this.getStringIndexType(),
                                this.getApiVersion(),
                                this.getRepeatabilityRequestID(),
                                this.getRepeatabilityFirstSent(),
                                analyzeRequest,
                                accept,
                                context));
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param analyzeRequest Analyze request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeDocumentResponse> analyzeDocumentWithResponseAsync(
            String modelId,
            Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema analyzeRequest,
            Context context) {
        final String accept = "application/json";
        String thisGetPagesConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(this.getPages(), CollectionFormat.CSV);
        return service.analyzeDocument(
                this.getEndpoint(),
                modelId,
                thisGetPagesConverted,
                this.getLocale(),
                this.getStringIndexType(),
                this.getApiVersion(),
                this.getRepeatabilityRequestID(),
                this.getRepeatabilityFirstSent(),
                analyzeRequest,
                accept,
                context);
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param analyzeRequest Analyze request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> analyzeDocumentAsync(
            String modelId,
            Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema analyzeRequest) {
        return analyzeDocumentWithResponseAsync(modelId, analyzeRequest)
                .flatMap((AnalyzeDocumentResponse res) -> Mono.empty());
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param analyzeRequest Analyze request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> analyzeDocumentAsync(
            String modelId,
            Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema analyzeRequest,
            Context context) {
        return analyzeDocumentWithResponseAsync(modelId, analyzeRequest, context)
                .flatMap((AnalyzeDocumentResponse res) -> Mono.empty());
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param analyzeRequest Analyze request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void analyzeDocument(
            String modelId,
            Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema analyzeRequest) {
        analyzeDocumentAsync(modelId, analyzeRequest).block();
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param analyzeRequest Analyze request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalyzeDocumentResponse analyzeDocumentWithResponse(
            String modelId,
            Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema analyzeRequest,
            Context context) {
        return analyzeDocumentWithResponseAsync(modelId, analyzeRequest, context).block();
    }

    /**
     * Gets the result of document analysis.
     *
     * @param modelId Unique model name.
     * @param resultId Analyze operation result ID.
     * @param format Result format.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of document analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AnalyzeResultOperation>> getAnalysisResultsWithResponseAsync(
            String modelId, String resultId, AnalyzeResultFormat format) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getAnalysisResults(
                                this.getEndpoint(), modelId, resultId, format, this.getApiVersion(), accept, context));
    }

    /**
     * Gets the result of document analysis.
     *
     * @param modelId Unique model name.
     * @param resultId Analyze operation result ID.
     * @param format Result format.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of document analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AnalyzeResultOperation>> getAnalysisResultsWithResponseAsync(
            String modelId, String resultId, AnalyzeResultFormat format, Context context) {
        final String accept = "application/json";
        return service.getAnalysisResults(
                this.getEndpoint(), modelId, resultId, format, this.getApiVersion(), accept, context);
    }

    /**
     * Gets the result of document analysis.
     *
     * @param modelId Unique model name.
     * @param resultId Analyze operation result ID.
     * @param format Result format.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of document analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeResultOperation> getAnalysisResultsAsync(
            String modelId, String resultId, AnalyzeResultFormat format) {
        return getAnalysisResultsWithResponseAsync(modelId, resultId, format)
                .flatMap(
                        (Response<AnalyzeResultOperation> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets the result of document analysis.
     *
     * @param modelId Unique model name.
     * @param resultId Analyze operation result ID.
     * @param format Result format.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of document analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeResultOperation> getAnalysisResultsAsync(
            String modelId, String resultId, AnalyzeResultFormat format, Context context) {
        return getAnalysisResultsWithResponseAsync(modelId, resultId, format, context)
                .flatMap(
                        (Response<AnalyzeResultOperation> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets the result of document analysis.
     *
     * @param modelId Unique model name.
     * @param resultId Analyze operation result ID.
     * @param format Result format.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of document analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalyzeResultOperation getAnalysisResults(String modelId, String resultId, AnalyzeResultFormat format) {
        return getAnalysisResultsAsync(modelId, resultId, format).block();
    }

    /**
     * Gets the result of document analysis.
     *
     * @param modelId Unique model name.
     * @param resultId Analyze operation result ID.
     * @param format Result format.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of document analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AnalyzeResultOperation> getAnalysisResultsWithResponse(
            String modelId, String resultId, AnalyzeResultFormat format, Context context) {
        return getAnalysisResultsWithResponseAsync(modelId, resultId, format, context).block();
    }

    /**
     * Trains a custom document analysis model.
     *
     * @param trainRequest Training request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TrainModelResponse> trainModelWithResponseAsync(
            Paths1JppyhfDocumentmodelsTrainPostRequestbodyContentApplicationJsonSchema trainRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.trainModel(this.getEndpoint(), this.getApiVersion(), trainRequest, accept, context));
    }

    /**
     * Trains a custom document analysis model.
     *
     * @param trainRequest Training request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TrainModelResponse> trainModelWithResponseAsync(
            Paths1JppyhfDocumentmodelsTrainPostRequestbodyContentApplicationJsonSchema trainRequest, Context context) {
        final String accept = "application/json";
        return service.trainModel(this.getEndpoint(), this.getApiVersion(), trainRequest, accept, context);
    }

    /**
     * Trains a custom document analysis model.
     *
     * @param trainRequest Training request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> trainModelAsync(
            Paths1JppyhfDocumentmodelsTrainPostRequestbodyContentApplicationJsonSchema trainRequest) {
        return trainModelWithResponseAsync(trainRequest).flatMap((TrainModelResponse res) -> Mono.empty());
    }

    /**
     * Trains a custom document analysis model.
     *
     * @param trainRequest Training request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> trainModelAsync(
            Paths1JppyhfDocumentmodelsTrainPostRequestbodyContentApplicationJsonSchema trainRequest, Context context) {
        return trainModelWithResponseAsync(trainRequest, context).flatMap((TrainModelResponse res) -> Mono.empty());
    }

    /**
     * Trains a custom document analysis model.
     *
     * @param trainRequest Training request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void trainModel(Paths1JppyhfDocumentmodelsTrainPostRequestbodyContentApplicationJsonSchema trainRequest) {
        trainModelAsync(trainRequest).block();
    }

    /**
     * Trains a custom document analysis model.
     *
     * @param trainRequest Training request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrainModelResponse trainModelWithResponse(
            Paths1JppyhfDocumentmodelsTrainPostRequestbodyContentApplicationJsonSchema trainRequest, Context context) {
        return trainModelWithResponseAsync(trainRequest, context).block();
    }

    /**
     * Creates a new model from document types of existing models.
     *
     * @param composeRequest Request body to create a composed model from component models.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ComposeModelResponse> composeModelWithResponseAsync(
            PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.composeModel(
                                this.getEndpoint(), this.getApiVersion(), composeRequest, accept, context));
    }

    /**
     * Creates a new model from document types of existing models.
     *
     * @param composeRequest Request body to create a composed model from component models.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ComposeModelResponse> composeModelWithResponseAsync(
            PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest,
            Context context) {
        final String accept = "application/json";
        return service.composeModel(this.getEndpoint(), this.getApiVersion(), composeRequest, accept, context);
    }

    /**
     * Creates a new model from document types of existing models.
     *
     * @param composeRequest Request body to create a composed model from component models.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> composeModelAsync(
            PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest) {
        return composeModelWithResponseAsync(composeRequest).flatMap((ComposeModelResponse res) -> Mono.empty());
    }

    /**
     * Creates a new model from document types of existing models.
     *
     * @param composeRequest Request body to create a composed model from component models.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> composeModelAsync(
            PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest,
            Context context) {
        return composeModelWithResponseAsync(composeRequest, context)
                .flatMap((ComposeModelResponse res) -> Mono.empty());
    }

    /**
     * Creates a new model from document types of existing models.
     *
     * @param composeRequest Request body to create a composed model from component models.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void composeModel(
            PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest) {
        composeModelAsync(composeRequest).block();
    }

    /**
     * Creates a new model from document types of existing models.
     *
     * @param composeRequest Request body to create a composed model from component models.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ComposeModelResponse composeModelWithResponse(
            PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest,
            Context context) {
        return composeModelWithResponseAsync(composeRequest, context).block();
    }

    /**
     * Generates authorization to copy a model to this location with specified modelId and optional description.
     *
     * @param authorizeCopyRequest Request body to authorize model copy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return authorization to copy a model to the specified target resource and modelId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CopyAuthorization>> createCopyAuthorizationWithResponseAsync(
            Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema authorizeCopyRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createCopyAuthorization(
                                this.getEndpoint(), this.getApiVersion(), authorizeCopyRequest, accept, context));
    }

    /**
     * Generates authorization to copy a model to this location with specified modelId and optional description.
     *
     * @param authorizeCopyRequest Request body to authorize model copy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return authorization to copy a model to the specified target resource and modelId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CopyAuthorization>> createCopyAuthorizationWithResponseAsync(
            Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema authorizeCopyRequest,
            Context context) {
        final String accept = "application/json";
        return service.createCopyAuthorization(
                this.getEndpoint(), this.getApiVersion(), authorizeCopyRequest, accept, context);
    }

    /**
     * Generates authorization to copy a model to this location with specified modelId and optional description.
     *
     * @param authorizeCopyRequest Request body to authorize model copy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return authorization to copy a model to the specified target resource and modelId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CopyAuthorization> createCopyAuthorizationAsync(
            Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema authorizeCopyRequest) {
        return createCopyAuthorizationWithResponseAsync(authorizeCopyRequest)
                .flatMap(
                        (Response<CopyAuthorization> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Generates authorization to copy a model to this location with specified modelId and optional description.
     *
     * @param authorizeCopyRequest Request body to authorize model copy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return authorization to copy a model to the specified target resource and modelId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CopyAuthorization> createCopyAuthorizationAsync(
            Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema authorizeCopyRequest,
            Context context) {
        return createCopyAuthorizationWithResponseAsync(authorizeCopyRequest, context)
                .flatMap(
                        (Response<CopyAuthorization> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Generates authorization to copy a model to this location with specified modelId and optional description.
     *
     * @param authorizeCopyRequest Request body to authorize model copy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return authorization to copy a model to the specified target resource and modelId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CopyAuthorization createCopyAuthorization(
            Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema authorizeCopyRequest) {
        return createCopyAuthorizationAsync(authorizeCopyRequest).block();
    }

    /**
     * Generates authorization to copy a model to this location with specified modelId and optional description.
     *
     * @param authorizeCopyRequest Request body to authorize model copy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return authorization to copy a model to the specified target resource and modelId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CopyAuthorization> createCopyAuthorizationWithResponse(
            Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema authorizeCopyRequest,
            Context context) {
        return createCopyAuthorizationWithResponseAsync(authorizeCopyRequest, context).block();
    }

    /**
     * Copies model to the target resource, region, and modelId.
     *
     * @param modelId Unique model name.
     * @param copyToRequest Authorization to copy a model to the specified target resource and modelId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BeginCopyModelResponse> beginCopyModelWithResponseAsync(
            String modelId, CopyAuthorization copyToRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.beginCopyModel(
                                this.getEndpoint(), modelId, this.getApiVersion(), copyToRequest, accept, context));
    }

    /**
     * Copies model to the target resource, region, and modelId.
     *
     * @param modelId Unique model name.
     * @param copyToRequest Authorization to copy a model to the specified target resource and modelId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BeginCopyModelResponse> beginCopyModelWithResponseAsync(
            String modelId, CopyAuthorization copyToRequest, Context context) {
        final String accept = "application/json";
        return service.beginCopyModel(
                this.getEndpoint(), modelId, this.getApiVersion(), copyToRequest, accept, context);
    }

    /**
     * Copies model to the target resource, region, and modelId.
     *
     * @param modelId Unique model name.
     * @param copyToRequest Authorization to copy a model to the specified target resource and modelId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginCopyModelAsync(String modelId, CopyAuthorization copyToRequest) {
        return beginCopyModelWithResponseAsync(modelId, copyToRequest)
                .flatMap((BeginCopyModelResponse res) -> Mono.empty());
    }

    /**
     * Copies model to the target resource, region, and modelId.
     *
     * @param modelId Unique model name.
     * @param copyToRequest Authorization to copy a model to the specified target resource and modelId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginCopyModelAsync(String modelId, CopyAuthorization copyToRequest, Context context) {
        return beginCopyModelWithResponseAsync(modelId, copyToRequest, context)
                .flatMap((BeginCopyModelResponse res) -> Mono.empty());
    }

    /**
     * Copies model to the target resource, region, and modelId.
     *
     * @param modelId Unique model name.
     * @param copyToRequest Authorization to copy a model to the specified target resource and modelId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginCopyModel(String modelId, CopyAuthorization copyToRequest) {
        beginCopyModelAsync(modelId, copyToRequest).block();
    }

    /**
     * Copies model to the target resource, region, and modelId.
     *
     * @param modelId Unique model name.
     * @param copyToRequest Authorization to copy a model to the specified target resource and modelId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BeginCopyModelResponse beginCopyModelWithResponse(
            String modelId, CopyAuthorization copyToRequest, Context context) {
        return beginCopyModelWithResponseAsync(modelId, copyToRequest, context).block();
    }

    /**
     * Lists all operations.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<OperationInfo>> listOperationsSinglePageAsync() {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context -> service.listOperations(this.getEndpoint(), this.getApiVersion(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Lists all operations.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<OperationInfo>> listOperationsSinglePageAsync(Context context) {
        final String accept = "application/json";
        return service.listOperations(this.getEndpoint(), this.getApiVersion(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Lists all operations.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<OperationInfo> listOperationsAsync() {
        return new PagedFlux<>(
                () -> listOperationsSinglePageAsync(), nextLink -> listOperationsNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all operations.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<OperationInfo> listOperationsAsync(Context context) {
        return new PagedFlux<>(
                () -> listOperationsSinglePageAsync(context),
                nextLink -> listOperationsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all operations.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OperationInfo> listOperations() {
        return new PagedIterable<>(listOperationsAsync());
    }

    /**
     * Lists all operations.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OperationInfo> listOperations(Context context) {
        return new PagedIterable<>(listOperationsAsync(context));
    }

    /**
     * Gets operation info.
     *
     * @param operationId Unique operation ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Paths1A41EsjOperationsOperationidGetResponses200ContentApplicationJsonSchema>>
            getOperationWithResponseAsync(String operationId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getOperation(this.getEndpoint(), operationId, this.getApiVersion(), accept, context));
    }

    /**
     * Gets operation info.
     *
     * @param operationId Unique operation ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Paths1A41EsjOperationsOperationidGetResponses200ContentApplicationJsonSchema>>
            getOperationWithResponseAsync(String operationId, Context context) {
        final String accept = "application/json";
        return service.getOperation(this.getEndpoint(), operationId, this.getApiVersion(), accept, context);
    }

    /**
     * Gets operation info.
     *
     * @param operationId Unique operation ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Paths1A41EsjOperationsOperationidGetResponses200ContentApplicationJsonSchema> getOperationAsync(
            String operationId) {
        return getOperationWithResponseAsync(operationId)
                .flatMap(
                        (Response<Paths1A41EsjOperationsOperationidGetResponses200ContentApplicationJsonSchema>
                                        res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets operation info.
     *
     * @param operationId Unique operation ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Paths1A41EsjOperationsOperationidGetResponses200ContentApplicationJsonSchema> getOperationAsync(
            String operationId, Context context) {
        return getOperationWithResponseAsync(operationId, context)
                .flatMap(
                        (Response<Paths1A41EsjOperationsOperationidGetResponses200ContentApplicationJsonSchema>
                                        res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets operation info.
     *
     * @param operationId Unique operation ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Paths1A41EsjOperationsOperationidGetResponses200ContentApplicationJsonSchema getOperation(
            String operationId) {
        return getOperationAsync(operationId).block();
    }

    /**
     * Gets operation info.
     *
     * @param operationId Unique operation ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Paths1A41EsjOperationsOperationidGetResponses200ContentApplicationJsonSchema>
            getOperationWithResponse(String operationId, Context context) {
        return getOperationWithResponseAsync(operationId, context).block();
    }

    /**
     * Cancels operation.
     *
     * @param operationId Unique operation ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelOperationWithResponseAsync(String operationId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.cancelOperation(
                                this.getEndpoint(), operationId, this.getApiVersion(), accept, context));
    }

    /**
     * Cancels operation.
     *
     * @param operationId Unique operation ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelOperationWithResponseAsync(String operationId, Context context) {
        final String accept = "application/json";
        return service.cancelOperation(this.getEndpoint(), operationId, this.getApiVersion(), accept, context);
    }

    /**
     * Cancels operation.
     *
     * @param operationId Unique operation ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelOperationAsync(String operationId) {
        return cancelOperationWithResponseAsync(operationId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Cancels operation.
     *
     * @param operationId Unique operation ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelOperationAsync(String operationId, Context context) {
        return cancelOperationWithResponseAsync(operationId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Cancels operation.
     *
     * @param operationId Unique operation ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelOperation(String operationId) {
        cancelOperationAsync(operationId).block();
    }

    /**
     * Cancels operation.
     *
     * @param operationId Unique operation ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelOperationWithResponse(String operationId, Context context) {
        return cancelOperationWithResponseAsync(operationId, context).block();
    }

    /**
     * List all models.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelInfo>> listModelsSinglePageAsync() {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context -> service.listModels(this.getEndpoint(), this.getApiVersion(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * List all models.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelInfo>> listModelsSinglePageAsync(Context context) {
        final String accept = "application/json";
        return service.listModels(this.getEndpoint(), this.getApiVersion(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * List all models.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ModelInfo> listModelsAsync() {
        return new PagedFlux<>(() -> listModelsSinglePageAsync(), nextLink -> listModelsNextSinglePageAsync(nextLink));
    }

    /**
     * List all models.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ModelInfo> listModelsAsync(Context context) {
        return new PagedFlux<>(
                () -> listModelsSinglePageAsync(context), nextLink -> listModelsNextSinglePageAsync(nextLink, context));
    }

    /**
     * List all models.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ModelInfo> listModels() {
        return new PagedIterable<>(listModelsAsync());
    }

    /**
     * List all models.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ModelInfo> listModels(Context context) {
        return new PagedIterable<>(listModelsAsync(context));
    }

    /**
     * Gets detailed model information.
     *
     * @param modelId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed model information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Paths17S33EsDocumentmodelsModelidGetResponses200ContentApplicationJsonSchema>>
            getModelInfoWithResponseAsync(String modelId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getModelInfo(this.getEndpoint(), modelId, this.getApiVersion(), accept, context));
    }

    /**
     * Gets detailed model information.
     *
     * @param modelId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed model information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Paths17S33EsDocumentmodelsModelidGetResponses200ContentApplicationJsonSchema>>
            getModelInfoWithResponseAsync(String modelId, Context context) {
        final String accept = "application/json";
        return service.getModelInfo(this.getEndpoint(), modelId, this.getApiVersion(), accept, context);
    }

    /**
     * Gets detailed model information.
     *
     * @param modelId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed model information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Paths17S33EsDocumentmodelsModelidGetResponses200ContentApplicationJsonSchema> getModelInfoAsync(
            String modelId) {
        return getModelInfoWithResponseAsync(modelId)
                .flatMap(
                        (Response<Paths17S33EsDocumentmodelsModelidGetResponses200ContentApplicationJsonSchema>
                                        res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets detailed model information.
     *
     * @param modelId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed model information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Paths17S33EsDocumentmodelsModelidGetResponses200ContentApplicationJsonSchema> getModelInfoAsync(
            String modelId, Context context) {
        return getModelInfoWithResponseAsync(modelId, context)
                .flatMap(
                        (Response<Paths17S33EsDocumentmodelsModelidGetResponses200ContentApplicationJsonSchema>
                                        res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets detailed model information.
     *
     * @param modelId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed model information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Paths17S33EsDocumentmodelsModelidGetResponses200ContentApplicationJsonSchema getModelInfo(String modelId) {
        return getModelInfoAsync(modelId).block();
    }

    /**
     * Gets detailed model information.
     *
     * @param modelId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed model information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Paths17S33EsDocumentmodelsModelidGetResponses200ContentApplicationJsonSchema>
            getModelInfoWithResponse(String modelId, Context context) {
        return getModelInfoWithResponseAsync(modelId, context).block();
    }

    /**
     * Deletes model.
     *
     * @param modelId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteModelWithResponseAsync(String modelId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.deleteModel(this.getEndpoint(), modelId, this.getApiVersion(), accept, context));
    }

    /**
     * Deletes model.
     *
     * @param modelId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteModelWithResponseAsync(String modelId, Context context) {
        final String accept = "application/json";
        return service.deleteModel(this.getEndpoint(), modelId, this.getApiVersion(), accept, context);
    }

    /**
     * Deletes model.
     *
     * @param modelId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteModelAsync(String modelId) {
        return deleteModelWithResponseAsync(modelId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes model.
     *
     * @param modelId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteModelAsync(String modelId, Context context) {
        return deleteModelWithResponseAsync(modelId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes model.
     *
     * @param modelId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteModel(String modelId) {
        deleteModelAsync(modelId).block();
    }

    /**
     * Deletes model.
     *
     * @param modelId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteModelWithResponse(String modelId, Context context) {
        return deleteModelWithResponseAsync(modelId, context).block();
    }

    /**
     * Return basic info about the current resource.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema>>
            getResourceInfoWithResponseAsync() {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getResourceInfo(this.getEndpoint(), this.getApiVersion(), accept, context));
    }

    /**
     * Return basic info about the current resource.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema>> getResourceInfoWithResponseAsync(
            Context context) {
        final String accept = "application/json";
        return service.getResourceInfo(this.getEndpoint(), this.getApiVersion(), accept, context);
    }

    /**
     * Return basic info about the current resource.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema> getResourceInfoAsync() {
        return getResourceInfoWithResponseAsync()
                .flatMap(
                        (Response<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Return basic info about the current resource.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema> getResourceInfoAsync(Context context) {
        return getResourceInfoWithResponseAsync(context)
                .flatMap(
                        (Response<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Return basic info about the current resource.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema getResourceInfo() {
        return getResourceInfoAsync().block();
    }

    /**
     * Return basic info about the current resource.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema> getResourceInfoWithResponse(
            Context context) {
        return getResourceInfoWithResponseAsync(context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<OperationInfo>> listOperationsNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context -> service.listOperationsNext(nextLink, this.getEndpoint(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<OperationInfo>> listOperationsNextSinglePageAsync(String nextLink, Context context) {
        final String accept = "application/json";
        return service.listOperationsNext(nextLink, this.getEndpoint(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelInfo>> listModelsNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listModelsNext(nextLink, this.getEndpoint(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelInfo>> listModelsNextSinglePageAsync(String nextLink, Context context) {
        final String accept = "application/json";
        return service.listModelsNext(nextLink, this.getEndpoint(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
