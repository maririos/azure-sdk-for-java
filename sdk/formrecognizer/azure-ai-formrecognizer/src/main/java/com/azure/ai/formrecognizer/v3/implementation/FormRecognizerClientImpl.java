// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.formrecognizer.v3.implementation;

import com.azure.ai.formrecognizer.v3.implementation.models.AnalyzeDocumentResponse;
import com.azure.ai.formrecognizer.v3.implementation.models.AnalyzeResultOperation;
import com.azure.ai.formrecognizer.v3.implementation.models.BuildModelResponse;
import com.azure.ai.formrecognizer.v3.implementation.models.ComposeModelResponse;
import com.azure.ai.formrecognizer.v3.implementation.models.ContentType;
import com.azure.ai.formrecognizer.v3.implementation.models.CopyAuthorization;
import com.azure.ai.formrecognizer.v3.implementation.models.CopyModelResponse;
import com.azure.ai.formrecognizer.v3.implementation.models.ErrorResponseException;
import com.azure.ai.formrecognizer.v3.implementation.models.ModelSummary;
import com.azure.ai.formrecognizer.v3.implementation.models.OperationInfo;
import com.azure.ai.formrecognizer.v3.implementation.models.Paths1CndbjaDocumentmodelsGetResponses200ContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.v3.implementation.models.Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.v3.implementation.models.Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.v3.implementation.models.Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.v3.implementation.models.PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.v3.implementation.models.PathsY4MxprOperationsGetResponses200ContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.v3.implementation.models.PathsZbsb39DocumentmodelsBuildPostRequestbodyContentApplicationJsonSchema;
import com.azure.ai.formrecognizer.v3.implementation.models.StringIndexType;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import java.nio.ByteBuffer;
import java.util.List;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the FormRecognizerClient type. */
public final class FormRecognizerClientImpl {
    /** The proxy service used to perform REST calls. */
    private final FormRecognizerClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Form Recognizer API version. */
    private final String apiVersion;

    /**
     * Gets Form Recognizer API version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of FormRecognizerClient client.
     *
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param apiVersion Form Recognizer API version.
     */
    FormRecognizerClientImpl(String endpoint, String apiVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint,
                apiVersion);
    }

    /**
     * Initializes an instance of FormRecognizerClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param apiVersion Form Recognizer API version.
     */
    FormRecognizerClientImpl(HttpPipeline httpPipeline, String endpoint, String apiVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, apiVersion);
    }

    /**
     * Initializes an instance of FormRecognizerClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param apiVersion Form Recognizer API version.
     */
    FormRecognizerClientImpl(
            HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint, String apiVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.apiVersion = apiVersion;
        this.service =
                RestProxy.create(FormRecognizerClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for FormRecognizerClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}/formrecognizer/{ApiVersion}")
    @ServiceInterface(name = "FormRecognizerClient")
    public interface FormRecognizerClientService {
        @Post("/documentModels/{modelId}/")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<AnalyzeDocumentResponse> analyzeDocument(
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @QueryParam("pages") String pages,
                @QueryParam("locale") String locale,
                @QueryParam("StringIndexType") StringIndexType stringIndexType,
                @PathParam("modelId") String modelId,
                @HostParam("ApiVersion") String apiVersionParam,
                @HeaderParam("Content-Type") ContentType contentType,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> analyzeRequest,
                @HeaderParam("Content-Length") Long contentLength,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/documentModels/{modelId}/")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<AnalyzeDocumentResponse> analyzeDocument(
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @QueryParam("pages") String pages,
                @QueryParam("locale") String locale,
                @QueryParam("StringIndexType") StringIndexType stringIndexType,
                @PathParam("modelId") String modelId,
                @HostParam("ApiVersion") String apiVersionParam,
                @BodyParam("application/json")
                        Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema
                                analyzeRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/documentModels/{modelId}/analyzeResults/{resultId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<AnalyzeResultOperation>> getAnalyzeResult(
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") String modelId,
                @HostParam("ApiVersion") String apiVersionParam,
                @PathParam("resultId") String resultId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/documentModels/:build")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<BuildModelResponse> buildModel(
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @HostParam("ApiVersion") String apiVersionParam,
                @BodyParam("application/json")
                        PathsZbsb39DocumentmodelsBuildPostRequestbodyContentApplicationJsonSchema buildRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/documentModels/:compose")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<ComposeModelResponse> composeModel(
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @HostParam("ApiVersion") String apiVersionParam,
                @BodyParam("application/json")
                        PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/documentModels/:authorizeCopy")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<CopyAuthorization>> authorizeCopy(
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @HostParam("ApiVersion") String apiVersionParam,
                @BodyParam("application/json")
                        Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema
                                authorizeCopyRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/documentModels/{modelId}/:copyTo")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<CopyModelResponse> copyModel(
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") String modelId,
                @HostParam("ApiVersion") String apiVersionParam,
                @BodyParam("application/json") CopyAuthorization copyToRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/operations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PathsY4MxprOperationsGetResponses200ContentApplicationJsonSchema>> listOperations(
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @HostParam("ApiVersion") String apiVersionParam,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<OperationInfo>> getOperationInfo(
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("operationId") String operationId,
                @HostParam("ApiVersion") String apiVersionParam,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/documentModels")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Paths1CndbjaDocumentmodelsGetResponses200ContentApplicationJsonSchema>> listAllModels(
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @HostParam("ApiVersion") String apiVersionParam,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/documentModels/{modelId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ModelSummary>> getModel(
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") String modelId,
                @HostParam("ApiVersion") String apiVersionParam,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/documentModels/{modelId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> deleteModel(
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") String modelId,
                @HostParam("ApiVersion") String apiVersionParam,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/info")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema>> getInfo(
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @HostParam("ApiVersion") String apiVersionParam,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PathsY4MxprOperationsGetResponses200ContentApplicationJsonSchema>> listOperationsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @HostParam("ApiVersion") String apiVersionParam,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Paths1CndbjaDocumentmodelsGetResponses200ContentApplicationJsonSchema>> listAllModelsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @HostParam("ApiVersion") String apiVersionParam,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param contentType Upload file type.
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param analyzeRequest Analyze request parameters.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeDocumentResponse> analyzeDocumentWithResponseAsync(
            String modelId,
            ContentType contentType,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            Flux<ByteBuffer> analyzeRequest,
            Long contentLength) {
        final String accept = "application/json";
        String pagesConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(pages, CollectionFormat.CSV);
        return FluxUtil.withContext(
                context ->
                        service.analyzeDocument(
                                this.getEndpoint(),
                                this.getApiVersion(),
                                pagesConverted,
                                locale,
                                stringIndexType,
                                modelId,
                                this.getApiVersion(),
                                contentType,
                                analyzeRequest,
                                contentLength,
                                accept,
                                context));
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param contentType Upload file type.
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param analyzeRequest Analyze request parameters.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeDocumentResponse> analyzeDocumentWithResponseAsync(
            String modelId,
            ContentType contentType,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            Flux<ByteBuffer> analyzeRequest,
            Long contentLength,
            Context context) {
        final String accept = "application/json";
        String pagesConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(pages, CollectionFormat.CSV);
        return service.analyzeDocument(
                this.getEndpoint(),
                this.getApiVersion(),
                pagesConverted,
                locale,
                stringIndexType,
                modelId,
                this.getApiVersion(),
                contentType,
                analyzeRequest,
                contentLength,
                accept,
                context);
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param contentType Upload file type.
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param analyzeRequest Analyze request parameters.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> analyzeDocumentAsync(
            String modelId,
            ContentType contentType,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            Flux<ByteBuffer> analyzeRequest,
            Long contentLength) {
        return analyzeDocumentWithResponseAsync(
                        modelId, contentType, pages, locale, stringIndexType, analyzeRequest, contentLength)
                .flatMap((AnalyzeDocumentResponse res) -> Mono.empty());
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param contentType Upload file type.
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param analyzeRequest Analyze request parameters.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> analyzeDocumentAsync(
            String modelId,
            ContentType contentType,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            Flux<ByteBuffer> analyzeRequest,
            Long contentLength,
            Context context) {
        return analyzeDocumentWithResponseAsync(
                        modelId, contentType, pages, locale, stringIndexType, analyzeRequest, contentLength, context)
                .flatMap((AnalyzeDocumentResponse res) -> Mono.empty());
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param contentType Upload file type.
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param analyzeRequest Analyze request parameters.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void analyzeDocument(
            String modelId,
            ContentType contentType,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            Flux<ByteBuffer> analyzeRequest,
            Long contentLength) {
        analyzeDocumentAsync(modelId, contentType, pages, locale, stringIndexType, analyzeRequest, contentLength)
                .block();
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param contentType Upload file type.
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param analyzeRequest Analyze request parameters.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalyzeDocumentResponse analyzeDocumentWithResponse(
            String modelId,
            ContentType contentType,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            Flux<ByteBuffer> analyzeRequest,
            Long contentLength,
            Context context) {
        return analyzeDocumentWithResponseAsync(
                        modelId, contentType, pages, locale, stringIndexType, analyzeRequest, contentLength, context)
                .block();
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param analyzeRequest Analyze request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeDocumentResponse> analyzeDocumentWithResponseAsync(
            String modelId,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema analyzeRequest) {
        final String accept = "application/json";
        String pagesConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(pages, CollectionFormat.CSV);
        return FluxUtil.withContext(
                context ->
                        service.analyzeDocument(
                                this.getEndpoint(),
                                this.getApiVersion(),
                                pagesConverted,
                                locale,
                                stringIndexType,
                                modelId,
                                this.getApiVersion(),
                                analyzeRequest,
                                accept,
                                context));
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param analyzeRequest Analyze request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeDocumentResponse> analyzeDocumentWithResponseAsync(
            String modelId,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema analyzeRequest,
            Context context) {
        final String accept = "application/json";
        String pagesConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(pages, CollectionFormat.CSV);
        return service.analyzeDocument(
                this.getEndpoint(),
                this.getApiVersion(),
                pagesConverted,
                locale,
                stringIndexType,
                modelId,
                this.getApiVersion(),
                analyzeRequest,
                accept,
                context);
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param analyzeRequest Analyze request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> analyzeDocumentAsync(
            String modelId,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema analyzeRequest) {
        return analyzeDocumentWithResponseAsync(modelId, pages, locale, stringIndexType, analyzeRequest)
                .flatMap((AnalyzeDocumentResponse res) -> Mono.empty());
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param analyzeRequest Analyze request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> analyzeDocumentAsync(
            String modelId,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema analyzeRequest,
            Context context) {
        return analyzeDocumentWithResponseAsync(modelId, pages, locale, stringIndexType, analyzeRequest, context)
                .flatMap((AnalyzeDocumentResponse res) -> Mono.empty());
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param analyzeRequest Analyze request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void analyzeDocument(
            String modelId,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema analyzeRequest) {
        analyzeDocumentAsync(modelId, pages, locale, stringIndexType, analyzeRequest).block();
    }

    /**
     * Analyzes document with model.
     *
     * @param modelId Unique model name.
     * @param pages List of 1-based page numbers to analyze. Ex. "1-3,5,7-9".
     * @param locale Locale hint for text recognition and document analysis. Value may contain only the language code
     *     (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param stringIndexType Method used to compute string offset and length.
     * @param analyzeRequest Analyze request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalyzeDocumentResponse analyzeDocumentWithResponse(
            String modelId,
            List<String> pages,
            String locale,
            StringIndexType stringIndexType,
            Paths1Go644WDocumentmodelsModelidAnalyzePostRequestbodyContentApplicationJsonSchema analyzeRequest,
            Context context) {
        return analyzeDocumentWithResponseAsync(modelId, pages, locale, stringIndexType, analyzeRequest, context)
                .block();
    }

    /**
     * Gets the result of document analysis.
     *
     * @param modelId Unique model name.
     * @param resultId Analyze operation result ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of document analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AnalyzeResultOperation>> getAnalyzeResultWithResponseAsync(String modelId, String resultId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getAnalyzeResult(
                                this.getEndpoint(),
                                this.getApiVersion(),
                                modelId,
                                this.getApiVersion(),
                                resultId,
                                accept,
                                context));
    }

    /**
     * Gets the result of document analysis.
     *
     * @param modelId Unique model name.
     * @param resultId Analyze operation result ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of document analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AnalyzeResultOperation>> getAnalyzeResultWithResponseAsync(
            String modelId, String resultId, Context context) {
        final String accept = "application/json";
        return service.getAnalyzeResult(
                this.getEndpoint(), this.getApiVersion(), modelId, this.getApiVersion(), resultId, accept, context);
    }

    /**
     * Gets the result of document analysis.
     *
     * @param modelId Unique model name.
     * @param resultId Analyze operation result ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of document analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeResultOperation> getAnalyzeResultAsync(String modelId, String resultId) {
        return getAnalyzeResultWithResponseAsync(modelId, resultId)
                .flatMap(
                        (Response<AnalyzeResultOperation> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets the result of document analysis.
     *
     * @param modelId Unique model name.
     * @param resultId Analyze operation result ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of document analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalyzeResultOperation> getAnalyzeResultAsync(String modelId, String resultId, Context context) {
        return getAnalyzeResultWithResponseAsync(modelId, resultId, context)
                .flatMap(
                        (Response<AnalyzeResultOperation> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets the result of document analysis.
     *
     * @param modelId Unique model name.
     * @param resultId Analyze operation result ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of document analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalyzeResultOperation getAnalyzeResult(String modelId, String resultId) {
        return getAnalyzeResultAsync(modelId, resultId).block();
    }

    /**
     * Gets the result of document analysis.
     *
     * @param modelId Unique model name.
     * @param resultId Analyze operation result ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of document analysis.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AnalyzeResultOperation> getAnalyzeResultWithResponse(
            String modelId, String resultId, Context context) {
        return getAnalyzeResultWithResponseAsync(modelId, resultId, context).block();
    }

    /**
     * Builds a custom document analysis model.
     *
     * @param buildRequest Building request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BuildModelResponse> buildModelWithResponseAsync(
            PathsZbsb39DocumentmodelsBuildPostRequestbodyContentApplicationJsonSchema buildRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.buildModel(
                                this.getEndpoint(),
                                this.getApiVersion(),
                                this.getApiVersion(),
                                buildRequest,
                                accept,
                                context));
    }

    /**
     * Builds a custom document analysis model.
     *
     * @param buildRequest Building request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BuildModelResponse> buildModelWithResponseAsync(
            PathsZbsb39DocumentmodelsBuildPostRequestbodyContentApplicationJsonSchema buildRequest, Context context) {
        final String accept = "application/json";
        return service.buildModel(
                this.getEndpoint(), this.getApiVersion(), this.getApiVersion(), buildRequest, accept, context);
    }

    /**
     * Builds a custom document analysis model.
     *
     * @param buildRequest Building request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> buildModelAsync(
            PathsZbsb39DocumentmodelsBuildPostRequestbodyContentApplicationJsonSchema buildRequest) {
        return buildModelWithResponseAsync(buildRequest).flatMap((BuildModelResponse res) -> Mono.empty());
    }

    /**
     * Builds a custom document analysis model.
     *
     * @param buildRequest Building request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> buildModelAsync(
            PathsZbsb39DocumentmodelsBuildPostRequestbodyContentApplicationJsonSchema buildRequest, Context context) {
        return buildModelWithResponseAsync(buildRequest, context).flatMap((BuildModelResponse res) -> Mono.empty());
    }

    /**
     * Builds a custom document analysis model.
     *
     * @param buildRequest Building request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void buildModel(PathsZbsb39DocumentmodelsBuildPostRequestbodyContentApplicationJsonSchema buildRequest) {
        buildModelAsync(buildRequest).block();
    }

    /**
     * Builds a custom document analysis model.
     *
     * @param buildRequest Building request parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BuildModelResponse buildModelWithResponse(
            PathsZbsb39DocumentmodelsBuildPostRequestbodyContentApplicationJsonSchema buildRequest, Context context) {
        return buildModelWithResponseAsync(buildRequest, context).block();
    }

    /**
     * Creates a new model from document types of existing models.
     *
     * @param composeRequest Request body to create a composed model from component models.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ComposeModelResponse> composeModelWithResponseAsync(
            PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.composeModel(
                                this.getEndpoint(),
                                this.getApiVersion(),
                                this.getApiVersion(),
                                composeRequest,
                                accept,
                                context));
    }

    /**
     * Creates a new model from document types of existing models.
     *
     * @param composeRequest Request body to create a composed model from component models.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ComposeModelResponse> composeModelWithResponseAsync(
            PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest,
            Context context) {
        final String accept = "application/json";
        return service.composeModel(
                this.getEndpoint(), this.getApiVersion(), this.getApiVersion(), composeRequest, accept, context);
    }

    /**
     * Creates a new model from document types of existing models.
     *
     * @param composeRequest Request body to create a composed model from component models.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> composeModelAsync(
            PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest) {
        return composeModelWithResponseAsync(composeRequest).flatMap((ComposeModelResponse res) -> Mono.empty());
    }

    /**
     * Creates a new model from document types of existing models.
     *
     * @param composeRequest Request body to create a composed model from component models.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> composeModelAsync(
            PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest,
            Context context) {
        return composeModelWithResponseAsync(composeRequest, context)
                .flatMap((ComposeModelResponse res) -> Mono.empty());
    }

    /**
     * Creates a new model from document types of existing models.
     *
     * @param composeRequest Request body to create a composed model from component models.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void composeModel(
            PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest) {
        composeModelAsync(composeRequest).block();
    }

    /**
     * Creates a new model from document types of existing models.
     *
     * @param composeRequest Request body to create a composed model from component models.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ComposeModelResponse composeModelWithResponse(
            PathsG0XsehDocumentmodelsComposePostRequestbodyContentApplicationJsonSchema composeRequest,
            Context context) {
        return composeModelWithResponseAsync(composeRequest, context).block();
    }

    /**
     * Generates authorization to copy a model to this location with specified modelId and optional description.
     *
     * @param authorizeCopyRequest Request body to authorize model copy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return authorization to copy a model to the specified target resource and modelId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CopyAuthorization>> authorizeCopyWithResponseAsync(
            Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema authorizeCopyRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.authorizeCopy(
                                this.getEndpoint(),
                                this.getApiVersion(),
                                this.getApiVersion(),
                                authorizeCopyRequest,
                                accept,
                                context));
    }

    /**
     * Generates authorization to copy a model to this location with specified modelId and optional description.
     *
     * @param authorizeCopyRequest Request body to authorize model copy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return authorization to copy a model to the specified target resource and modelId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CopyAuthorization>> authorizeCopyWithResponseAsync(
            Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema authorizeCopyRequest,
            Context context) {
        final String accept = "application/json";
        return service.authorizeCopy(
                this.getEndpoint(), this.getApiVersion(), this.getApiVersion(), authorizeCopyRequest, accept, context);
    }

    /**
     * Generates authorization to copy a model to this location with specified modelId and optional description.
     *
     * @param authorizeCopyRequest Request body to authorize model copy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return authorization to copy a model to the specified target resource and modelId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CopyAuthorization> authorizeCopyAsync(
            Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema authorizeCopyRequest) {
        return authorizeCopyWithResponseAsync(authorizeCopyRequest)
                .flatMap(
                        (Response<CopyAuthorization> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Generates authorization to copy a model to this location with specified modelId and optional description.
     *
     * @param authorizeCopyRequest Request body to authorize model copy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return authorization to copy a model to the specified target resource and modelId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CopyAuthorization> authorizeCopyAsync(
            Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema authorizeCopyRequest,
            Context context) {
        return authorizeCopyWithResponseAsync(authorizeCopyRequest, context)
                .flatMap(
                        (Response<CopyAuthorization> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Generates authorization to copy a model to this location with specified modelId and optional description.
     *
     * @param authorizeCopyRequest Request body to authorize model copy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return authorization to copy a model to the specified target resource and modelId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CopyAuthorization authorizeCopy(
            Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema authorizeCopyRequest) {
        return authorizeCopyAsync(authorizeCopyRequest).block();
    }

    /**
     * Generates authorization to copy a model to this location with specified modelId and optional description.
     *
     * @param authorizeCopyRequest Request body to authorize model copy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return authorization to copy a model to the specified target resource and modelId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CopyAuthorization> authorizeCopyWithResponse(
            Paths1P2NrygDocumentmodelsAuthorizecopyPostRequestbodyContentApplicationJsonSchema authorizeCopyRequest,
            Context context) {
        return authorizeCopyWithResponseAsync(authorizeCopyRequest, context).block();
    }

    /**
     * Copies model to the target resource, region, and modelId.
     *
     * @param modelId Unique model name.
     * @param copyToRequest Authorization to copy a model to the specified target resource and modelId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CopyModelResponse> copyModelWithResponseAsync(String modelId, CopyAuthorization copyToRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.copyModel(
                                this.getEndpoint(),
                                this.getApiVersion(),
                                modelId,
                                this.getApiVersion(),
                                copyToRequest,
                                accept,
                                context));
    }

    /**
     * Copies model to the target resource, region, and modelId.
     *
     * @param modelId Unique model name.
     * @param copyToRequest Authorization to copy a model to the specified target resource and modelId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CopyModelResponse> copyModelWithResponseAsync(
            String modelId, CopyAuthorization copyToRequest, Context context) {
        final String accept = "application/json";
        return service.copyModel(
                this.getEndpoint(),
                this.getApiVersion(),
                modelId,
                this.getApiVersion(),
                copyToRequest,
                accept,
                context);
    }

    /**
     * Copies model to the target resource, region, and modelId.
     *
     * @param modelId Unique model name.
     * @param copyToRequest Authorization to copy a model to the specified target resource and modelId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> copyModelAsync(String modelId, CopyAuthorization copyToRequest) {
        return copyModelWithResponseAsync(modelId, copyToRequest).flatMap((CopyModelResponse res) -> Mono.empty());
    }

    /**
     * Copies model to the target resource, region, and modelId.
     *
     * @param modelId Unique model name.
     * @param copyToRequest Authorization to copy a model to the specified target resource and modelId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> copyModelAsync(String modelId, CopyAuthorization copyToRequest, Context context) {
        return copyModelWithResponseAsync(modelId, copyToRequest, context)
                .flatMap((CopyModelResponse res) -> Mono.empty());
    }

    /**
     * Copies model to the target resource, region, and modelId.
     *
     * @param modelId Unique model name.
     * @param copyToRequest Authorization to copy a model to the specified target resource and modelId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void copyModel(String modelId, CopyAuthorization copyToRequest) {
        copyModelAsync(modelId, copyToRequest).block();
    }

    /**
     * Copies model to the target resource, region, and modelId.
     *
     * @param modelId Unique model name.
     * @param copyToRequest Authorization to copy a model to the specified target resource and modelId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CopyModelResponse copyModelWithResponse(String modelId, CopyAuthorization copyToRequest, Context context) {
        return copyModelWithResponseAsync(modelId, copyToRequest, context).block();
    }

    /**
     * Lists all operations.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<OperationInfo>> listOperationsSinglePageAsync() {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listOperations(
                                        this.getEndpoint(),
                                        this.getApiVersion(),
                                        this.getApiVersion(),
                                        accept,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Lists all operations.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<OperationInfo>> listOperationsSinglePageAsync(Context context) {
        final String accept = "application/json";
        return service.listOperations(this.getEndpoint(), this.getApiVersion(), this.getApiVersion(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Lists all operations.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<OperationInfo> listOperationsAsync() {
        return new PagedFlux<>(
                () -> listOperationsSinglePageAsync(), nextLink -> listOperationsNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all operations.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<OperationInfo> listOperationsAsync(Context context) {
        return new PagedFlux<>(
                () -> listOperationsSinglePageAsync(context),
                nextLink -> listOperationsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all operations.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OperationInfo> listOperations() {
        return new PagedIterable<>(listOperationsAsync());
    }

    /**
     * Lists all operations.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OperationInfo> listOperations(Context context) {
        return new PagedIterable<>(listOperationsAsync(context));
    }

    /**
     * Gets operation info.
     *
     * @param operationId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<OperationInfo>> getOperationInfoWithResponseAsync(String operationId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getOperationInfo(
                                this.getEndpoint(),
                                this.getApiVersion(),
                                operationId,
                                this.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Gets operation info.
     *
     * @param operationId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<OperationInfo>> getOperationInfoWithResponseAsync(String operationId, Context context) {
        final String accept = "application/json";
        return service.getOperationInfo(
                this.getEndpoint(), this.getApiVersion(), operationId, this.getApiVersion(), accept, context);
    }

    /**
     * Gets operation info.
     *
     * @param operationId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OperationInfo> getOperationInfoAsync(String operationId) {
        return getOperationInfoWithResponseAsync(operationId)
                .flatMap(
                        (Response<OperationInfo> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets operation info.
     *
     * @param operationId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OperationInfo> getOperationInfoAsync(String operationId, Context context) {
        return getOperationInfoWithResponseAsync(operationId, context)
                .flatMap(
                        (Response<OperationInfo> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets operation info.
     *
     * @param operationId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationInfo getOperationInfo(String operationId) {
        return getOperationInfoAsync(operationId).block();
    }

    /**
     * Gets operation info.
     *
     * @param operationId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation info.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OperationInfo> getOperationInfoWithResponse(String operationId, Context context) {
        return getOperationInfoWithResponseAsync(operationId, context).block();
    }

    /**
     * List all models.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelSummary>> listAllModelsSinglePageAsync() {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listAllModels(
                                        this.getEndpoint(),
                                        this.getApiVersion(),
                                        this.getApiVersion(),
                                        accept,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * List all models.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelSummary>> listAllModelsSinglePageAsync(Context context) {
        final String accept = "application/json";
        return service.listAllModels(this.getEndpoint(), this.getApiVersion(), this.getApiVersion(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * List all models.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ModelSummary> listAllModelsAsync() {
        return new PagedFlux<>(
                () -> listAllModelsSinglePageAsync(), nextLink -> listAllModelsNextSinglePageAsync(nextLink));
    }

    /**
     * List all models.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ModelSummary> listAllModelsAsync(Context context) {
        return new PagedFlux<>(
                () -> listAllModelsSinglePageAsync(context),
                nextLink -> listAllModelsNextSinglePageAsync(nextLink, context));
    }

    /**
     * List all models.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ModelSummary> listAllModels() {
        return new PagedIterable<>(listAllModelsAsync());
    }

    /**
     * List all models.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ModelSummary> listAllModels(Context context) {
        return new PagedIterable<>(listAllModelsAsync(context));
    }

    /**
     * Gets detailed model information.
     *
     * @param modelId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed model information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ModelSummary>> getModelWithResponseAsync(String modelId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getModel(
                                this.getEndpoint(),
                                this.getApiVersion(),
                                modelId,
                                this.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Gets detailed model information.
     *
     * @param modelId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed model information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ModelSummary>> getModelWithResponseAsync(String modelId, Context context) {
        final String accept = "application/json";
        return service.getModel(
                this.getEndpoint(), this.getApiVersion(), modelId, this.getApiVersion(), accept, context);
    }

    /**
     * Gets detailed model information.
     *
     * @param modelId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed model information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ModelSummary> getModelAsync(String modelId) {
        return getModelWithResponseAsync(modelId)
                .flatMap(
                        (Response<ModelSummary> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets detailed model information.
     *
     * @param modelId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed model information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ModelSummary> getModelAsync(String modelId, Context context) {
        return getModelWithResponseAsync(modelId, context)
                .flatMap(
                        (Response<ModelSummary> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets detailed model information.
     *
     * @param modelId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed model information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ModelSummary getModel(String modelId) {
        return getModelAsync(modelId).block();
    }

    /**
     * Gets detailed model information.
     *
     * @param modelId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed model information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ModelSummary> getModelWithResponse(String modelId, Context context) {
        return getModelWithResponseAsync(modelId, context).block();
    }

    /**
     * Deletes model.
     *
     * @param modelId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteModelWithResponseAsync(String modelId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteModel(
                                this.getEndpoint(),
                                this.getApiVersion(),
                                modelId,
                                this.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Deletes model.
     *
     * @param modelId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteModelWithResponseAsync(String modelId, Context context) {
        final String accept = "application/json";
        return service.deleteModel(
                this.getEndpoint(), this.getApiVersion(), modelId, this.getApiVersion(), accept, context);
    }

    /**
     * Deletes model.
     *
     * @param modelId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteModelAsync(String modelId) {
        return deleteModelWithResponseAsync(modelId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes model.
     *
     * @param modelId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteModelAsync(String modelId, Context context) {
        return deleteModelWithResponseAsync(modelId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes model.
     *
     * @param modelId Unique model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteModel(String modelId) {
        deleteModelAsync(modelId).block();
    }

    /**
     * Deletes model.
     *
     * @param modelId Unique model name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteModelWithResponse(String modelId, Context context) {
        return deleteModelWithResponseAsync(modelId, context).block();
    }

    /**
     * Return basic info about the current resource.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema>> getInfoWithResponseAsync() {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getInfo(
                                this.getEndpoint(), this.getApiVersion(), this.getApiVersion(), accept, context));
    }

    /**
     * Return basic info about the current resource.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema>> getInfoWithResponseAsync(
            Context context) {
        final String accept = "application/json";
        return service.getInfo(this.getEndpoint(), this.getApiVersion(), this.getApiVersion(), accept, context);
    }

    /**
     * Return basic info about the current resource.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema> getInfoAsync() {
        return getInfoWithResponseAsync()
                .flatMap(
                        (Response<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Return basic info about the current resource.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema> getInfoAsync(Context context) {
        return getInfoWithResponseAsync(context)
                .flatMap(
                        (Response<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Return basic info about the current resource.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema getInfo() {
        return getInfoAsync().block();
    }

    /**
     * Return basic info about the current resource.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Paths1Ep1Fe8InfoGetResponses200ContentApplicationJsonSchema> getInfoWithResponse(Context context) {
        return getInfoWithResponseAsync(context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<OperationInfo>> listOperationsNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listOperationsNext(
                                        nextLink,
                                        this.getEndpoint(),
                                        this.getApiVersion(),
                                        this.getApiVersion(),
                                        accept,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<OperationInfo>> listOperationsNextSinglePageAsync(String nextLink, Context context) {
        final String accept = "application/json";
        return service.listOperationsNext(
                        nextLink, this.getEndpoint(), this.getApiVersion(), this.getApiVersion(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelSummary>> listAllModelsNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listAllModelsNext(
                                        nextLink,
                                        this.getEndpoint(),
                                        this.getApiVersion(),
                                        this.getApiVersion(),
                                        accept,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelSummary>> listAllModelsNextSinglePageAsync(String nextLink, Context context) {
        final String accept = "application/json";
        return service.listAllModelsNext(
                        nextLink, this.getEndpoint(), this.getApiVersion(), this.getApiVersion(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
