{
  "swagger": "2.0",
  "info": {
    "title": "Form Recognizer Client",
    "description": "Extracts content, layout, and structured data from documents.",
    "version": "2021-07-30-preview"
  },
  "securityDefinitions": {
    "apim_key": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [
    {
      "apim_key": []
    }
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}/formrecognizer/",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "#/parameters/Endpoint"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "paths": {
    "/documentModels/{modelId}/:analyze": {
      "post": {
        "operationId": "analyzeDocument",
        "summary": "Analyze document",
        "description": "Analyzes document with model.",
        "tags": [
          "Analysis"
        ],
        "consumes": [
          "application/json",
          "application/pdf",
          "image/jpeg",
          "image/png",
          "image/tiff",
          "image/bmp"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/PathModelId"
          },
          {
            "$ref": "#/parameters/QueryPages"
          },
          {
            "$ref": "#/parameters/QueryLocale"
          },
          {
            "$ref": "#/parameters/QueryStringIndexType"
          },
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "$ref": "#/parameters/HeaderRepeatabilityRequestId"
          },
          {
            "$ref": "#/parameters/HeaderRepeatabilityFirstSent"
          },
          {
            "name": "analyzeRequest",
            "description": "Analyze request parameters.",
            "required": false,
            "in": "body",
            "schema": {
              "description": "Document analysis parameters.",
              "type": "object",
              "properties": {
                "source": {
                  "description": "Documents to analyze.",
                  "$ref": "#/definitions/ContentSource"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request is queued successfully.",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "description": "URL used to track the progress and obtain the result of the analyze operation."
              }
            }
          },
          "default": {
            "description": "Error encountered.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/documentModels/{modelId}/analyzeResults/{resultId}": {
      "get": {
        "operationId": "getAnalysisResults",
        "summary": "Get analyze result",
        "description": "Gets the result of document analysis.",
        "tags": [
          "Analysis"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/PathModelId"
          },
          {
            "$ref": "#/parameters/PathResultId"
          },
          {
            "name": "format",
            "description": "Result format.",
            "required": false,
            "in": "query",
            "type": "string",
            "enum": [
              "json",
              "protobuf"
            ],
            "x-ms-enum": {
              "name": "AnalyzeResultFormat",
              "modelAsString": true
            },
            "default": "json"
          },
          {
            "$ref": "#/parameters/QueryApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/AnalyzeResultOperation"
            }
          },
          "default": {
            "description": "Error encountered.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/documentModels/:train": {
      "post": {
        "operationId": "trainModel",
        "summary": "Train model",
        "description": "Trains a custom document analysis model.",
        "tags": [
          "Creation"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "name": "trainRequest",
            "description": "Training request parameters.",
            "required": true,
            "in": "body",
            "schema": {
              "description": "Request body to train a new custom model.",
              "type": "object",
              "required": [
                "modelId",
                "trainSource"
              ],
              "properties": {
                "modelId": {
                  "$ref": "#/definitions/ModelId"
                },
                "description": {
                  "$ref": "#/definitions/ModelDescription"
                },
                "trainSource": {
                  "description": "Training data.",
                  "$ref": "#/definitions/ContentSource"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request is queued successfully.",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "description": "Operation result URL."
              }
            }
          },
          "default": {
            "description": "Error encountered.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/documentModels/:compose": {
      "post": {
        "operationId": "composeModel",
        "summary": "Compose model",
        "description": "Creates a new model from document types of existing models.",
        "tags": [
          "Creation"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "name": "composeRequest",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Request body to create a composed model from component models.",
              "type": "object",
              "required": [
                "modelId",
                "componentModels"
              ],
              "properties": {
                "modelId": {
                  "$ref": "#/definitions/ModelId"
                },
                "description": {
                  "$ref": "#/definitions/ModelDescription"
                },
                "componentModels": {
                  "description": "List of component models to compose.",
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "required": [
                      "modelId"
                    ],
                    "properties": {
                      "modelId": {
                        "$ref": "#/definitions/ModelId"
                      },
                      "docTypes": {
                        "description": "Optional list of document types from this model to include in the composed model.  If not specified, all document types from this model will be included.",
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/DocType"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request is queued successfully.",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "description": "Operation result URL."
              }
            }
          },
          "default": {
            "description": "Error encountered.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/documentModels/:authorizeCopy": {
      "post": {
        "operationId": "createCopyAuthorization",
        "summary": "Generate copy authorization",
        "description": "Generates authorization to copy a model to this location with specified modelId and optional description.",
        "tags": [
          "Creation"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "name": "authorizeCopyRequest",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Request body to authorize model copy.",
              "type": "object",
              "required": [
                "modelId"
              ],
              "properties": {
                "modelId": {
                  "$ref": "#/definitions/ModelId"
                },
                "description": {
                  "$ref": "#/definitions/ModelDescription"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/CopyAuthorization"
            }
          },
          "default": {
            "description": "Error encountered.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/documentModels/{modelId}/:copyTo": {
      "post": {
        "operationId": "beginCopyModel",
        "summary": "Copy model",
        "description": "Copies model to the target resource, region, and modelId.",
        "tags": [
          "Creation"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/PathModelId"
          },
          {
            "$ref": "#/parameters/QueryApiVersion"
          },
          {
            "name": "copyToRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyAuthorization"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request is queued successfully.",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "description": "Operation result URL."
              }
            }
          },
          "default": {
            "description": "Error encountered.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/operations": {
      "get": {
        "operationId": "listOperations",
        "summary": "List operations",
        "description": "Lists all operations.",
        "tags": [
          "Operation"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "description": "List of operations.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/OperationInfo"
                  }
                },
                "nextLink": {
                  "description": "Link to the next page of operations.",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error encountered.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink",
          "itemName": "value"
        }
      }
    },
    "/operations/{operationId}": {
      "get": {
        "operationId": "getOperation",
        "summary": "Get operation",
        "description": "Gets operation info.",
        "tags": [
          "Operation"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/PathOperationId"
          },
          {
            "$ref": "#/parameters/QueryApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/OperationInfo"
                },
                {
                  "type": "object",
                  "properties": {
                    "error": {
                      "description": "Encountered error.",
                      "$ref": "#/definitions/Error"
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error encountered.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "cancelOperation",
        "summary": "Cancel operation",
        "description": "Cancels operation.",
        "tags": [
          "Operation"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/PathOperationId"
          },
          {
            "$ref": "#/parameters/QueryApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation canceled."
          },
          "default": {
            "description": "Error encountered.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/documentModels": {
      "get": {
        "operationId": "listModels",
        "summary": "List models",
        "description": "List all models",
        "tags": [
          "Management"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "description": "List of models.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ModelInfo"
                  }
                },
                "nextLink": {
                  "description": "Link to the next page of models.",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error encountered.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink",
          "itemName": "value"
        }
      }
    },
    "/documentModels/{modelId}": {
      "get": {
        "operationId": "getModelInfo",
        "summary": "Get model",
        "description": "Gets detailed model information.",
        "tags": [
          "Management"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/PathModelId"
          },
          {
            "$ref": "#/parameters/QueryApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/ModelInfo"
                },
                {
                  "type": "object",
                  "properties": {
                    "docTypes": {
                      "description": "Supported document types.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "schema"
                        ],
                        "properties": {
                          "description": {
                            "$ref": "#/definitions/ModelDescription"
                          },
                          "schema": {
                            "$ref": "#/definitions/DocTypeSchema"
                          },
                          "estimatedConfidence": {
                            "description": "Estimated confidence for each semantic field.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "number",
                              "minimum": 0,
                              "maximum": 1
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error encountered.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteModel",
        "summary": "Delete model",
        "description": "Deletes model.",
        "tags": [
          "Management"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/PathModelId"
          },
          {
            "$ref": "#/parameters/QueryApiVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting model."
          },
          "default": {
            "description": "Error encountered.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/info": {
      "get": {
        "operationId": "getResourceInfo",
        "summary": "Get info",
        "description": "Return basic info about the current resource.",
        "tags": [
          "Management"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/QueryApiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "type": "object",
              "required": [
                "customDocumentModels"
              ],
              "properties": {
                "customDocumentModels": {
                  "type": "object",
                  "required": [
                    "count",
                    "limit"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "Number of custom models in the current resource."
                    },
                    "limit": {
                      "type": "integer",
                      "description": "Maximum number of custom models supported in the current resource."
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error encountered.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiVersion": {
      "description": "API version.",
      "type": "string",
      "enum": [
        "2021-07-30-preview"
      ],
      "x-ms-enum": {
        "name": "ApiVersion",
        "modelAsString": true
      }
    },
    "Error": {
      "description": "Error response object.",
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "Error code.",
          "type": "string"
        },
        "message": {
          "description": "Error message.",
          "type": "string"
        },
        "target": {
          "description": "Target of the error.",
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "innererror": {
          "$ref": "#/definitions/InnerError"
        }
      }
    },
    "InnerError": {
      "description": "Detailed error.",
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "description": "Error code.",
          "type": "string"
        },
        "innererror": {
          "$ref": "#/definitions/InnerError"
        }
      }
    },
    "ContentSource": {
      "description": "Content data or location specification.",
      "type": "object",
      "required": [
        "kind"
      ],
      "discriminator": "kind",
      "properties": {
        "kind": {
          "description": "Source types.",
          "type": "string",
          "enum": [
            "base64",
            "azure.blob",
            "local",
            "web"
          ],
          "x-ms-enum": {
            "name": "ContentSourceKind",
            "modelAsString": true
          }
        }
      }
    },
    "Base64ContentSource": {
      "description": "Content represented via Base64 encoding.",
      "x-ms-discriminator-value": "base64",
      "allOf": [
        {
          "$ref": "#/definitions/ContentSource"
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "description": "Base64 encoded content data.",
              "type": "string",
              "format": "byte"
            }
          }
        }
      ]
    },
    "AzureBlobContentSource": {
      "description": "Azure Blob Storage content.",
      "x-ms-discriminator-value": "azure.blob",
      "allOf": [
        {
          "$ref": "#/definitions/ContentSource"
        },
        {
          "type": "object",
          "required": [
            "containerUrl"
          ],
          "properties": {
            "containerUrl": {
              "description": "Azure Blob Storage container URL.",
              "type": "string",
              "format": "uri"
            },
            "path": {
              "description": "Content path.",
              "type": "string"
            }
          }
        }
      ]
    },
    "LocalContentSource": {
      "description": "Local storage content.",
      "x-ms-discriminator-value": "local",
      "allOf": [
        {
          "$ref": "#/definitions/ContentSource"
        },
        {
          "type": "object",
          "required": [
            "path"
          ],
          "properties": {
            "path": {
              "description": "Local path.",
              "type": "string"
            }
          }
        }
      ]
    },
    "WebContentSource": {
      "description": "Publicly accessible Internet content.",
      "x-ms-discriminator-value": "local",
      "allOf": [
        {
          "$ref": "#/definitions/ContentSource"
        },
        {
          "type": "object",
          "required": [
            "url"
          ],
          "properties": {
            "url": {
              "description": "Publicly accessible URL.",
              "type": "string",
              "format": "uri"
            }
          }
        }
      ]
    },
    "CopyAuthorization": {
      "description": "Authorization to copy a model to the specified target resource and modelId.",
      "type": "object",
      "required": [
        "targetResourceId",
        "targetResourceRegion",
        "targetModelId",
        "accessToken",
        "expirationDateTime"
      ],
      "properties": {
        "targetResourceId": {
          "description": "ID of the target Azure resource where the model should be copied to.",
          "type": "string",
          "x-ms-azure-resource": true
        },
        "targetResourceRegion": {
          "description": "Location of the target Azure resource where the model should be copied to.",
          "type": "string"
        },
        "targetModelId": {
          "description": "Identifier of the target model.",
          "$ref": "#/definitions/ModelId"
        },
        "accessToken": {
          "description": "Token used to authorize the request.",
          "type": "string"
        },
        "expirationDateTime": {
          "description": "Date/time when the access token expires.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "OperationInfo": {
      "description": "Operation info.",
      "type": "object",
      "required": [
        "operationId",
        "status",
        "createdDateTime",
        "lastUpdatedDateTime",
        "resourceLocation"
      ],
      "properties": {
        "operationId": {
          "description": "Operation ID",
          "type": "string"
        },
        "status": {
          "description": "Operation status.",
          "type": "string",
          "enum": [
            "notStarted",
            "running",
            "failed",
            "succeeded",
            "canceled"
          ],
          "x-ms-enum": {
            "name": "OperationStatus",
            "modelAsString": false
          }
        },
        "percentCompleted": {
          "description": "Operation progress (0-100).",
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 100
        },
        "createdDateTime": {
          "description": "Date and time (UTC) when the model was created.",
          "type": "string"
        },
        "lastUpdatedDateTime": {
          "description": "Date and time (UTC) when the status was last updated.",
          "type": "string"
        },
        "kind": {
          "description": "Type of operation.",
          "type": "string",
          "enum": [
            "documentModelTrain",
            "documentModelCompose",
            "documentModelCopyTo"
          ]
        },
        "resourceLocation": {
          "description": "URL of the resource targeted by this operation.",
          "type": "string"
        }
      }
    },
    "ModelInfo": {
      "description": "Model info.",
      "type": "object",
      "required": [
        "modelId",
        "createdDateTime"
      ],
      "properties": {
        "modelId": {
          "$ref": "#/definitions/ModelId"
        },
        "description": {
          "$ref": "#/definitions/ModelDescription"
        },
        "createdDateTime": {
          "description": "Date and time (UTC) when the model was created.",
          "type": "string"
        }
      }
    },
    "DocTypeSchema": {
      "description": "Description of the document semantic schema using a JSON Schema style syntax.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/FieldTypeSchema"
      }
    },
    "FieldTypeSchema": {
      "description": "Description of the field semantic schema using a JSON Schema style syntax.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Field type.",
          "type": "string",
          "enum": [
            "string",
            "date",
            "time",
            "phoneNumber",
            "number",
            "integer",
            "selectionMark",
            "countryRegion",
            "currency",
            "signature",
            "array",
            "object"
          ]
        },
        "items": {
          "description": "Field type schema of each array element.",
          "$ref": "#/definitions/FieldTypeSchema"
        },
        "properties": {
          "description": "Named sub-fields of the object field.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/FieldTypeSchema"
          }
        }
      }
    },
    "AnalyzeResultOperation": {
      "description": "Status and result of the analyze operation.",
      "type": "object",
      "required": [
        "status",
        "createdDateTime",
        "lastUpdatedDateTime"
      ],
      "properties": {
        "status": {
          "description": "Operation status.",
          "type": "string",
          "enum": [
            "notStarted",
            "running",
            "failed",
            "succeeded"
          ],
          "x-ms-enum": {
            "name": "AnalyzeResultOperationStatus",
            "modelAsString": false
          }
        },
        "createdDateTime": {
          "description": "Date and time (UTC) when the analyze operation was submitted.",
          "type": "string",
          "format": "date-time"
        },
        "lastUpdatedDateTime": {
          "description": "Date and time (UTC) when the status was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "error": {
          "description": "Encountered error during document analysis.",
          "$ref": "#/definitions/Error"
        },
        "analyzeResult": {
          "$ref": "#/definitions/AnalyzeResult"
        }
      }
    },
    "AnalyzeResult": {
      "description": "Document analysis result.",
      "type": "object",
      "required": [
        "content",
        "pages"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version used to produce this result.",
          "$ref": "#/definitions/ApiVersion"
        },
        "modelId": {
          "description": "Model ID used to produce this result.",
          "$ref": "#/definitions/ModelId"
        },
        "stringIndexType": {
          "description": "Method used to compute string offset and length.",
          "$ref": "#/definitions/StringIndexType"
        },
        "content": {
          "description": "Concatenate string representation of all textual and visual elements in reading order.",
          "type": "string"
        },
        "pages": {
          "description": "Analyzed pages.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentPage"
          }
        },
        "tables": {
          "description": "Extracted tables.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentTable"
          }
        },
        "keyValuePairs": {
          "description": "Extracted key-value pairs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentKeyValuePair"
          }
        },
        "entities": {
          "description": "Extracted entities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentEntity"
          }
        },
        "styles": {
          "description": "Extracted font styles.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentStyle"
          }
        },
        "documents": {
          "description": "Extracted documents.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Document"
          }
        }
      }
    },
    "DocumentPage": {
      "description": "Content and layout elements extracted from a page from the input.",
      "type": "object",
      "required": [
        "pageNumber",
        "angle",
        "width",
        "height",
        "unit",
        "spans"
      ],
      "properties": {
        "pageNumber": {
          "description": "1-based page number in the input document.",
          "type": "integer",
          "minimum": 1
        },
        "angle": {
          "description": "The general orientation of the content in clockwise direction, measured in degrees between (-180, 180].",
          "type": "number",
          "minimum": -180,
          "maximum": 180,
          "exclusiveMinimum": true
        },
        "width": {
          "description": "The width of the image/PDF in pixels/inches, respectively.",
          "type": "number",
          "minimum": 0
        },
        "height": {
          "description": "The height of the image/PDF in pixels/inches, respectively.",
          "type": "number",
          "minimum": 0
        },
        "unit": {
          "description": "The unit used by the width, height, and boundingBox properties. For images, the unit is \"pixel\". For PDF, the unit is \"inch\".",
          "type": "string",
          "enum": [
            "pixel",
            "inch"
          ],
          "x-ms-enum": {
            "name": "LengthUnit",
            "modelAsString": true
          }
        },
        "words": {
          "description": "Extracted words from the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentWord"
          }
        },
        "selectionMarks": {
          "description": "Extracted selection marks from the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSelectionMark"
          }
        },
        "visualElements": {
          "description": "Extracted visual elements from the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentVisualElement"
          }
        },
        "lines": {
          "description": "Extracted lines from the page, potentially containing both textual and visual elements.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentLine"
          }
        },
        "blocks": {
          "description": "Extracted layout blocks from the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentBlock"
          }
        },
        "spans": {
          "description": "Location of the page in the reading order concatenated content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        }
      }
    },
    "DocumentWord": {
      "description": "A word object consisting of a contiguous sequence of characters.  For non-space delimited languages, such as Chinese, Japanese, and Korean, each character is represented as its own word.",
      "type": "object",
      "required": [
        "text",
        "boundingBox",
        "confidence",
        "span"
      ],
      "properties": {
        "text": {
          "description": "Text content of the word.",
          "type": "string"
        },
        "boundingBox": {
          "description": "Bounding box of the word.",
          "$ref": "#/definitions/BoundingBox"
        },
        "confidence": {
          "description": "Confidence of correctly extracting the word.",
          "$ref": "#/definitions/Confidence"
        },
        "span": {
          "description": "Location of the word in the reading order concatenated content.",
          "$ref": "#/definitions/DocumentSpan"
        },
        "charPositions": {
          "description": "Normalized starting horizontal position of each character in the word.",
          "type": "array",
          "items": {
            "type": "number",
            "minimum": 0,
            "maximum": 1
          }
        }
      }
    },
    "DocumentSelectionMark": {
      "description": "A selection mark object representing check boxes, radio buttons, and other elements indicating a selection.",
      "type": "object",
      "required": [
        "state",
        "boundingBox",
        "confidence",
        "span"
      ],
      "properties": {
        "state": {
          "description": "State of the selection mark.",
          "$ref": "#/definitions/DocumentSelectionMarkState"
        },
        "boundingBox": {
          "description": "Bounding box of the selection mark.",
          "$ref": "#/definitions/BoundingBox"
        },
        "confidence": {
          "description": "Confidence of correctly extracting the selection mark.",
          "$ref": "#/definitions/Confidence"
        },
        "span": {
          "description": "Location of the selection mark in the reading order concatenated content.",
          "$ref": "#/definitions/DocumentSpan"
        }
      }
    },
    "DocumentSelectionMarkState": {
      "description": "State of the selection mark.",
      "type": "string",
      "enum": [
        "selected",
        "unselected"
      ],
      "x-ms-enum": {
        "name": "SelectionMarkState",
        "modelAsString": true
      }
    },
    "DocumentVisualElement": {
      "description": "An object representing various visual elements.",
      "type": "object",
      "required": [
        "type",
        "boundingBox",
        "span"
      ],
      "properties": {
        "kind": {
          "description": "Kind of visual element.",
          "type": "string",
          "enum": [
            "image",
            "separator"
          ],
          "x-ms-enum": {
            "name": "VisualElementKind",
            "modelAsString": true
          }
        },
        "boundingBox": {
          "description": "Bounding box of the visual element.",
          "$ref": "#/definitions/BoundingBox"
        },
        "confidence": {
          "description": "Confidence of correctly extracting the visual element.",
          "$ref": "#/definitions/Confidence"
        },
        "span": {
          "description": "Location of the visual element in the reading order concatenated content.",
          "$ref": "#/definitions/DocumentSpan"
        }
      }
    },
    "DocumentLine": {
      "description": "A content line object consisting of an adjacent sequence of content elements, such as words and selection marks.",
      "type": "object",
      "required": [
        "content",
        "boundingBox",
        "span"
      ],
      "properties": {
        "content": {
          "description": "Concatenated content of the contained elements in reading order.",
          "type": "string"
        },
        "boundingBox": {
          "description": "Bounding box of the line.",
          "$ref": "#/definitions/BoundingBox"
        },
        "confidence": {
          "description": "Confidence of correctly extracting the line.",
          "$ref": "#/definitions/Confidence"
        },
        "spans": {
          "description": "Location of the line in the reading order concatenated content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        }
      }
    },
    "DocumentBlock": {
      "description": "A block object that describes various layout elements.",
      "type": "object",
      "required": [
        "kind",
        "content",
        "boundingBox",
        "spans"
      ],
      "properties": {
        "kind": {
          "description": "Kind of layout block element.",
          "type": "string",
          "enum": [
            "paragraph",
            "column"
          ],
          "x-ms-enum": {
            "name": "VisualElementKind",
            "modelAsString": true
          }
        },
        "content": {
          "description": "Concatenated content of the layout block in reading order.",
          "type": "string"
        },
        "boundingBox": {
          "description": "Bounding box of the layout block element.",
          "$ref": "#/definitions/BoundingBox"
        },
        "confidence": {
          "description": "Confidence of correctly extracting the layout block element.",
          "$ref": "#/definitions/Confidence"
        },
        "spans": {
          "description": "Location of the layout block element in the reading order concatenated content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        },
        "continuation": {
          "description": "If the block is split, pointer to the continuation block.",
          "$ref": "#/definitions/Continuation"
        }
      }
    },
    "DocumentTable": {
      "description": "A table object consisting table cells arranged in a rectangular layout.",
      "type": "object",
      "required": [
        "rowCount",
        "columnCount",
        "cells",
        "boundingRegions",
        "spans"
      ],
      "properties": {
        "rowCount": {
          "description": "Number of rows in the table.",
          "type": "integer",
          "minimum": 1
        },
        "columnCount": {
          "description": "Number of columns in the table.",
          "type": "integer",
          "minimum": 1
        },
        "cells": {
          "description": "Cells contained within the table.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentTableCell"
          }
        },
        "boundingRegions": {
          "description": "Bounding regions covering the table.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BoundingRegion"
          }
        },
        "confidence": {
          "description": "Confidence of correctly extracting the table.",
          "$ref": "#/definitions/Confidence"
        },
        "spans": {
          "description": "Location of the table in the reading order concatenated content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        }
      }
    },
    "DocumentTableCell": {
      "description": "An object representing the location and content of a table cell.",
      "type": "object",
      "required": [
        "kind",
        "rowIndex",
        "columnIndex",
        "content",
        "boundingRegions",
        "confidence",
        "spans"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "content",
            "rowHeader",
            "columnHeader",
            "stub",
            "description"
          ],
          "default": "content",
          "x-ms-enum": {
            "name": "DocumentTableCellKind",
            "modelAsString": true
          }
        },
        "rowIndex": {
          "description": "Row index of the cell.",
          "type": "integer"
        },
        "columnIndex": {
          "description": "Column index of the cell.",
          "type": "integer"
        },
        "rowSpan": {
          "description": "Number of rows spanned by this cell.",
          "type": "integer",
          "minimum": 1,
          "default": 1
        },
        "columnSpan": {
          "description": "Number of columns spanned by this cell.",
          "type": "integer",
          "minimum": 1,
          "default": 1
        },
        "content": {
          "description": "Concatenated content of the table cell in reading order.",
          "type": "string"
        },
        "boundingRegions": {
          "description": "Bounding regions covering the table cell.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BoundingRegion"
          }
        },
        "confidence": {
          "description": "Confidence of correctly extracting the table cell.",
          "$ref": "#/definitions/Confidence"
        },
        "spans": {
          "description": "Location of the table cell in the reading order concatenated content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        }
      }
    },
    "DocumentKeyValuePair": {
      "description": "An object representing a form field with distinct field label (key) and field value (may be empty).",
      "type": "object",
      "required": [
        "key",
        "value",
        "confidence"
      ],
      "properties": {
        "key": {
          "description": "Field label of the key-value pair.",
          "$ref": "#/definitions/DocumentKeyValueElement"
        },
        "value": {
          "description": "Field value of the key-value pair.",
          "$ref": "#/definitions/DocumentKeyValueElement"
        },
        "confidence": {
          "description": "Confidence of correctly extracting the key-value pair.",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "DocumentKeyValueElement": {
      "description": "An object representing the field key or value in a key-value pair.",
      "type": "object",
      "required": [
        "content",
        "boundingRegions",
        "spans"
      ],
      "properties": {
        "content": {
          "description": "Concatenated content of the key-value element in reading order.",
          "type": "string"
        },
        "boundingRegions": {
          "description": "Bounding regions covering the key-value element.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BoundingRegion"
          }
        },
        "spans": {
          "description": "Location of the key-value element in the reading order concatenated content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        }
      }
    },
    "DocumentEntity": {
      "description": "An object representing various categories of entities.",
      "type": "object",
      "required": [
        "category",
        "content",
        "boundingRegion",
        "confidence",
        "spans"
      ],
      "properties": {
        "category": {
          "description": "Entity type.",
          "type": "string"
        },
        "subCategory": {
          "description": "Entity sub type.",
          "type": "string"
        },
        "content": {
          "description": "Entity content.",
          "type": "string"
        },
        "boundingRegions": {
          "description": "Bounding regions covering the entity.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BoundingRegion"
          }
        },
        "confidence": {
          "description": "Confidence of correctly extracting the entity.",
          "$ref": "#/definitions/Confidence"
        },
        "spans": {
          "description": "Location of the entity in the reading order concatenated content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        }
      }
    },
    "DocumentStyle": {
      "description": "An object representing observed text styles.",
      "type": "object",
      "required": [
        "spans"
      ],
      "properties": {
        "fontFamily": {
          "description": "Font family of the text in the specified spans.",
          "type": "string",
          "enum": [
            "serif",
            "sanSerif",
            "monospace",
            "cursive",
            "fantasy"
          ],
          "x-ms-enum": {
            "name": "FontFamily",
            "modelAsString": true
          }
        },
        "fontStyle": {
          "description": "Font style of the text in the specified spans.",
          "type": "string",
          "enum": [
            "normal",
            "italic"
          ],
          "x-ms-enum": {
            "name": "FontStyle",
            "modelAsString": true
          }
        },
        "fontWeight": {
          "description": "Font weight of the text in the specified spans.",
          "type": "string",
          "enum": [
            "normal",
            "bold",
            "light"
          ],
          "x-ms-enum": {
            "name": "FontWeight",
            "modelAsString": true
          }
        },
        "textDecoration": {
          "description": "Font decoration of the text in the specified spans.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fontSize": {
          "description": "Font size of the text in the specified spans.",
          "type": "number",
          "minimum": 0
        },
        "confidence": {
          "description": "Confidence of correctly identifying the style.",
          "$ref": "#/definitions/Confidence"
        },
        "spans": {
          "description": "Location of the text elements in the concatenated content the style applies to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        }
      }
    },
    "Document": {
      "description": "An object describing the location and semantic content of a document.",
      "type": "object",
      "required": [
        "type",
        "boundingRegions",
        "fields",
        "confidence",
        "spans"
      ],
      "properties": {
        "docType": {
          "description": "Document type.",
          "$ref": "#/definitions/DocType"
        },
        "boundingRegions": {
          "description": "Bounding regions covering the document.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BoundingRegion"
          }
        },
        "fields": {
          "description": "Dictionary of named field values.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/FieldValue"
          }
        },
        "confidence": {
          "description": "Confidence of correctly extracting the document.",
          "$ref": "#/definitions/Confidence"
        },
        "spans": {
          "description": "Location of the document in the reading order concatenated content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        }
      }
    },
    "FieldValue": {
      "description": "An object representing the content and location of a field value.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "Data type of the field value.",
          "$ref": "#/definitions/FieldValueType"
        },
        "valueString": {
          "description": "String value.",
          "type": "string"
        },
        "valueDate": {
          "description": "Date value in YYYY-MM-DD format (ISO 8601).",
          "type": "string",
          "format": "date"
        },
        "valueTime": {
          "description": "Time value in hh:mm:ss format (ISO 8601).",
          "type": "string",
          "format": "time"
        },
        "valuePhoneNumber": {
          "description": "Phone number value in E.164 format (ex. +19876543210).",
          "type": "string"
        },
        "valueNumber": {
          "description": "Floating point value.",
          "type": "number"
        },
        "valueInteger": {
          "description": "Integer value.",
          "type": "integer"
        },
        "valueSelectionMark": {
          "description": "Selection mark value.",
          "$ref": "#/definitions/DocumentSelectionMarkState"
        },
        "valueSignature": {
          "description": "Presence of signature.",
          "type": "string",
          "enum": [
            "signed",
            "unsigned"
          ],
          "x-ms-enum": {
            "name": "DocumentSignatureType",
            "modelAsString": true
          }
        },
        "valueCountryRegion": {
          "description": "3-letter country code value (ISO 3166-1 alpha-3).",
          "type": "string"
        },
        "valueCurrency": {
          "description": "3-letter currency code value (ISO 4217).",
          "type": "string"
        },
        "valueArray": {
          "description": "Array of field values.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldValue"
          }
        },
        "valueObject": {
          "description": "Dictionary of named field values.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/FieldValue"
          }
        },
        "content": {
          "description": "Field content.",
          "type": "string"
        },
        "boundingRegions": {
          "description": "Bounding regions covering the field.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BoundingRegion"
          }
        },
        "confidence": {
          "description": "Confidence of correctly extracting the field.",
          "$ref": "#/definitions/Confidence"
        },
        "spans": {
          "description": "Location of the field in the reading order concatenated content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSpan"
          }
        }
      }
    },
    "FieldValueType": {
      "description": "Semantic data type of the field value.",
      "type": "string",
      "enum": [
        "string",
        "date",
        "time",
        "phoneNumber",
        "number",
        "integer",
        "selectionMark",
        "countryRegion",
        "currency",
        "signature",
        "array",
        "object"
      ],
      "x-ms-enum": {
        "name": "FieldValueType",
        "modelAsString": true
      }
    },
    "ModelId": {
      "description": "Unique model name.",
      "type": "string",
      "format": "[a-zA-Z0-9][a-zA-Z0-9._~:-]{1,63}"
    },
    "ModelDescription": {
      "description": "Model description.",
      "type": "string",
      "maxLength": 4096
    },
    "DocType": {
      "description": "Document type name.",
      "type": "string",
      "minLength": 2,
      "maxLength": 64
    },
    "BoundingBox": {
      "description": "Quadrangle bounding box, with coordinates specified relative to the top-left of the page. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation.",
      "type": "array",
      "minItems": 8,
      "maxItems": 8,
      "items": {
        "type": "number",
        "minimum": 0
      }
    },
    "BoundingRegion": {
      "description": "Bounding box on a specific page of the input.",
      "type": "object",
      "required": [
        "pageNumber",
        "boundingBox"
      ],
      "properties": {
        "pageNumber": {
          "description": "1-based page number of page containing the bounding region.",
          "type": "integer",
          "minimum": 1
        },
        "boundingBox": {
          "description": "Bounding box on the page, or the entire page if not specified.",
          "$ref": "#/definitions/BoundingBox"
        }
      }
    },
    "Confidence": {
      "description": "Prediction confidence.",
      "type": "number",
      "minimum": 0,
      "maximum": 1
    },
    "DocumentSpan": {
      "description": "Contiguous region of the concatenated content property, specified as an offset and length.",
      "type": "object",
      "required": [
        "offset",
        "length"
      ],
      "properties": {
        "offset": {
          "description": "Zero-based index of the content represented by the span.",
          "type": "integer",
          "minimum": 0
        },
        "length": {
          "description": "Number of characters in the content represented by the span.",
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "StringIndexType": {
      "description": "Method used to compute string offset and length.",
      "type": "string",
      "enum": [
        "textElements",
        "unicodeCodePoint",
        "utf16CodeUnit"
      ],
      "x-ms-enum": {
        "name": "StringIndexType",
        "modelAsString": true
      },
      "default": "textElements"
    },
    "Continuation": {
      "description": "Pointer to the continuation element if the current element is split.",
      "type": "string",
      "format": "uri-reference"
    }
  },
  "parameters": {
    "Endpoint": {
      "name": "endpoint",
      "description": "Supported Cognitive Services endpoints (protocol and hostname, for\nexample: https://westus2.api.cognitive.microsoft.com).",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true
    },
    "PathModelId": {
      "name": "modelId",
      "description": "Unique model name.",
      "required": true,
      "type": "string",
      "format": "[a-zA-Z0-9][a-zA-Z0-9._~:-]{1,63}",
      "in": "path",
      "x-ms-parameter-location": "method"
    },
    "PathOperationId": {
      "name": "operationId",
      "description": "Unique operation ID.",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-parameter-location": "method"
    },
    "PathResultId": {
      "name": "resultId",
      "description": "Analyze operation result ID.",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-parameter-location": "method"
    },
    "QueryModelId": {
      "name": "modelId",
      "description": "Unique model name.",
      "required": true,
      "type": "string",
      "format": "[a-zA-Z0-9][a-zA-Z0-9._~:-]{1,63}",
      "in": "query"
    },
    "QueryPages": {
      "name": "pages",
      "description": "List of 1-based page numbers to analyze.  Ex. \"1-3,5,7-9\"",
      "required": false,
      "type": "array",
      "in": "query",
      "items": {
        "type": "string",
        "pattern": "(^[0-9]+-[0-9]+$)|(^[0-9]+$)"
      }
    },
    "QueryLocale": {
      "name": "locale",
      "description": "Locale hint for text recognition and document analysis.  Value may contain only the language code (ex. \"en\", \"fr\") or BCP 47 language tag (ex. \"en-US\").",
      "required": false,
      "type": "string",
      "in": "query"
    },
    "QueryStringIndexType": {
      "name": "StringIndexType",
      "description": "Method used to compute string offset and length.",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "textElements",
        "unicodeCodePoint",
        "utf16CodeUnit"
      ],
      "x-ms-enum": {
        "name": "StringIndexType",
        "modelAsString": true
      },
      "default": "textElements"
    },
    "QueryApiVersion": {
      "name": "api-version",
      "description": "Requested API version.",
      "required": true,
      "type": "string",
      "in": "query",
      "enum": [
        "2021-07-30-preview"
      ],
      "x-ms-enum": {
        "name": "ApiVersion",
        "modelAsString": true
      },
      "x-ms-parameter-location": "client"
    },
    "HeaderRepeatabilityRequestId": {
      "name": "Repeatability-Request-ID",
      "description": "Client-generated unique request ID.",
      "required": false,
      "type": "string",
      "in": "header"
    },
    "HeaderRepeatabilityFirstSent": {
      "name": "RepeatabilityFirst-Sent",
      "description": "Date and time the request was first created.",
      "required": false,
      "type": "string",
      "in": "header"
    }
  }
}
